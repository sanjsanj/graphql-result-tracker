# source: https://result-tracker-b05e382178.herokuapp.com/result-tracker-prod/prod
# timestamp: Tue Nov 20 2018 20:35:35 GMT+0000 (Greenwich Mean Time)

type AggregateChallenge {
  count: Int!
}

type AggregateResult {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Challenge implements Node {
  id: ID!
  title: String!
  user: User!
  participant: User!
  results(where: ResultWhereInput, orderBy: ResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Result!]
  goal: Int!
}

"""A connection to a list of items."""
type ChallengeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ChallengeEdge]!
  aggregate: AggregateChallenge!
}

input ChallengeCreateInput {
  title: String!
  goal: Int!
  user: UserCreateOneWithoutChallengesCreatedInput!
  participant: UserCreateOneWithoutChallengesParticipatingInput!
  results: ResultCreateManyWithoutChallengeInput
}

input ChallengeCreateManyWithoutParticipantInput {
  create: [ChallengeCreateWithoutParticipantInput!]
  connect: [ChallengeWhereUniqueInput!]
}

input ChallengeCreateManyWithoutUserInput {
  create: [ChallengeCreateWithoutUserInput!]
  connect: [ChallengeWhereUniqueInput!]
}

input ChallengeCreateOneWithoutResultsInput {
  create: ChallengeCreateWithoutResultsInput
  connect: ChallengeWhereUniqueInput
}

input ChallengeCreateWithoutParticipantInput {
  title: String!
  goal: Int!
  user: UserCreateOneWithoutChallengesCreatedInput!
  results: ResultCreateManyWithoutChallengeInput
}

input ChallengeCreateWithoutResultsInput {
  title: String!
  goal: Int!
  user: UserCreateOneWithoutChallengesCreatedInput!
  participant: UserCreateOneWithoutChallengesParticipatingInput!
}

input ChallengeCreateWithoutUserInput {
  title: String!
  goal: Int!
  participant: UserCreateOneWithoutChallengesParticipatingInput!
  results: ResultCreateManyWithoutChallengeInput
}

"""An edge in a connection."""
type ChallengeEdge {
  """The item at the end of the edge."""
  node: Challenge!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ChallengeOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  goal_ASC
  goal_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ChallengePreviousValues {
  id: ID!
  title: String!
  goal: Int!
}

type ChallengeSubscriptionPayload {
  mutation: MutationType!
  node: Challenge
  updatedFields: [String!]
  previousValues: ChallengePreviousValues
}

input ChallengeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ChallengeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChallengeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChallengeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ChallengeWhereInput
}

input ChallengeUpdateInput {
  title: String
  goal: Int
  user: UserUpdateOneRequiredWithoutChallengesCreatedInput
  participant: UserUpdateOneRequiredWithoutChallengesParticipatingInput
  results: ResultUpdateManyWithoutChallengeInput
}

input ChallengeUpdateManyMutationInput {
  title: String
  goal: Int
}

input ChallengeUpdateManyWithoutParticipantInput {
  create: [ChallengeCreateWithoutParticipantInput!]
  connect: [ChallengeWhereUniqueInput!]
  disconnect: [ChallengeWhereUniqueInput!]
  delete: [ChallengeWhereUniqueInput!]
  update: [ChallengeUpdateWithWhereUniqueWithoutParticipantInput!]
  upsert: [ChallengeUpsertWithWhereUniqueWithoutParticipantInput!]
}

input ChallengeUpdateManyWithoutUserInput {
  create: [ChallengeCreateWithoutUserInput!]
  connect: [ChallengeWhereUniqueInput!]
  disconnect: [ChallengeWhereUniqueInput!]
  delete: [ChallengeWhereUniqueInput!]
  update: [ChallengeUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [ChallengeUpsertWithWhereUniqueWithoutUserInput!]
}

input ChallengeUpdateOneRequiredWithoutResultsInput {
  create: ChallengeCreateWithoutResultsInput
  connect: ChallengeWhereUniqueInput
  update: ChallengeUpdateWithoutResultsDataInput
  upsert: ChallengeUpsertWithoutResultsInput
}

input ChallengeUpdateWithoutParticipantDataInput {
  title: String
  goal: Int
  user: UserUpdateOneRequiredWithoutChallengesCreatedInput
  results: ResultUpdateManyWithoutChallengeInput
}

input ChallengeUpdateWithoutResultsDataInput {
  title: String
  goal: Int
  user: UserUpdateOneRequiredWithoutChallengesCreatedInput
  participant: UserUpdateOneRequiredWithoutChallengesParticipatingInput
}

input ChallengeUpdateWithoutUserDataInput {
  title: String
  goal: Int
  participant: UserUpdateOneRequiredWithoutChallengesParticipatingInput
  results: ResultUpdateManyWithoutChallengeInput
}

input ChallengeUpdateWithWhereUniqueWithoutParticipantInput {
  where: ChallengeWhereUniqueInput!
  data: ChallengeUpdateWithoutParticipantDataInput!
}

input ChallengeUpdateWithWhereUniqueWithoutUserInput {
  where: ChallengeWhereUniqueInput!
  data: ChallengeUpdateWithoutUserDataInput!
}

input ChallengeUpsertWithoutResultsInput {
  update: ChallengeUpdateWithoutResultsDataInput!
  create: ChallengeCreateWithoutResultsInput!
}

input ChallengeUpsertWithWhereUniqueWithoutParticipantInput {
  where: ChallengeWhereUniqueInput!
  update: ChallengeUpdateWithoutParticipantDataInput!
  create: ChallengeCreateWithoutParticipantInput!
}

input ChallengeUpsertWithWhereUniqueWithoutUserInput {
  where: ChallengeWhereUniqueInput!
  update: ChallengeUpdateWithoutUserDataInput!
  create: ChallengeCreateWithoutUserInput!
}

input ChallengeWhereInput {
  """Logical AND on all given filters."""
  AND: [ChallengeWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChallengeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChallengeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  goal: Int

  """All values that are not equal to given value."""
  goal_not: Int

  """All values that are contained in given list."""
  goal_in: [Int!]

  """All values that are not contained in given list."""
  goal_not_in: [Int!]

  """All values less than the given value."""
  goal_lt: Int

  """All values less than or equal the given value."""
  goal_lte: Int

  """All values greater than the given value."""
  goal_gt: Int

  """All values greater than or equal the given value."""
  goal_gte: Int
  user: UserWhereInput
  participant: UserWhereInput
  results_every: ResultWhereInput
  results_some: ResultWhereInput
  results_none: ResultWhereInput
}

input ChallengeWhereUniqueInput {
  id: ID
}

scalar DateTime

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createChallenge(data: ChallengeCreateInput!): Challenge!
  createResult(data: ResultCreateInput!): Result!
  createUser(data: UserCreateInput!): User!
  updateChallenge(data: ChallengeUpdateInput!, where: ChallengeWhereUniqueInput!): Challenge
  updateResult(data: ResultUpdateInput!, where: ResultWhereUniqueInput!): Result
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteChallenge(where: ChallengeWhereUniqueInput!): Challenge
  deleteResult(where: ResultWhereUniqueInput!): Result
  deleteUser(where: UserWhereUniqueInput!): User
  upsertChallenge(where: ChallengeWhereUniqueInput!, create: ChallengeCreateInput!, update: ChallengeUpdateInput!): Challenge!
  upsertResult(where: ResultWhereUniqueInput!, create: ResultCreateInput!, update: ResultUpdateInput!): Result!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyChallenges(data: ChallengeUpdateManyMutationInput!, where: ChallengeWhereInput): BatchPayload!
  updateManyResults(data: ResultUpdateManyMutationInput!, where: ResultWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  deleteManyChallenges(where: ChallengeWhereInput): BatchPayload!
  deleteManyResults(where: ResultWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  challenges(where: ChallengeWhereInput, orderBy: ChallengeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Challenge]!
  results(where: ResultWhereInput, orderBy: ResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Result]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  challenge(where: ChallengeWhereUniqueInput!): Challenge
  result(where: ResultWhereUniqueInput!): Result
  user(where: UserWhereUniqueInput!): User
  challengesConnection(where: ChallengeWhereInput, orderBy: ChallengeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChallengeConnection!
  resultsConnection(where: ResultWhereInput, orderBy: ResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ResultConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Result implements Node {
  id: ID!
  challenge: Challenge!
  createdBy: User!
  createdAt: DateTime!
  winner: User!
  loser: User!
  confirmed: Boolean
}

"""A connection to a list of items."""
type ResultConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ResultEdge]!
  aggregate: AggregateResult!
}

input ResultCreateInput {
  confirmed: Boolean
  challenge: ChallengeCreateOneWithoutResultsInput!
  createdBy: UserCreateOneInput!
  winner: UserCreateOneInput!
  loser: UserCreateOneInput!
}

input ResultCreateManyWithoutChallengeInput {
  create: [ResultCreateWithoutChallengeInput!]
  connect: [ResultWhereUniqueInput!]
}

input ResultCreateWithoutChallengeInput {
  confirmed: Boolean
  createdBy: UserCreateOneInput!
  winner: UserCreateOneInput!
  loser: UserCreateOneInput!
}

"""An edge in a connection."""
type ResultEdge {
  """The item at the end of the edge."""
  node: Result!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ResultOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  confirmed_ASC
  confirmed_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ResultPreviousValues {
  id: ID!
  createdAt: DateTime!
  confirmed: Boolean
}

type ResultSubscriptionPayload {
  mutation: MutationType!
  node: Result
  updatedFields: [String!]
  previousValues: ResultPreviousValues
}

input ResultSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ResultSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ResultSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ResultSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ResultWhereInput
}

input ResultUpdateInput {
  confirmed: Boolean
  challenge: ChallengeUpdateOneRequiredWithoutResultsInput
  createdBy: UserUpdateOneRequiredInput
  winner: UserUpdateOneRequiredInput
  loser: UserUpdateOneRequiredInput
}

input ResultUpdateManyMutationInput {
  confirmed: Boolean
}

input ResultUpdateManyWithoutChallengeInput {
  create: [ResultCreateWithoutChallengeInput!]
  connect: [ResultWhereUniqueInput!]
  disconnect: [ResultWhereUniqueInput!]
  delete: [ResultWhereUniqueInput!]
  update: [ResultUpdateWithWhereUniqueWithoutChallengeInput!]
  upsert: [ResultUpsertWithWhereUniqueWithoutChallengeInput!]
}

input ResultUpdateWithoutChallengeDataInput {
  confirmed: Boolean
  createdBy: UserUpdateOneRequiredInput
  winner: UserUpdateOneRequiredInput
  loser: UserUpdateOneRequiredInput
}

input ResultUpdateWithWhereUniqueWithoutChallengeInput {
  where: ResultWhereUniqueInput!
  data: ResultUpdateWithoutChallengeDataInput!
}

input ResultUpsertWithWhereUniqueWithoutChallengeInput {
  where: ResultWhereUniqueInput!
  update: ResultUpdateWithoutChallengeDataInput!
  create: ResultCreateWithoutChallengeInput!
}

input ResultWhereInput {
  """Logical AND on all given filters."""
  AND: [ResultWhereInput!]

  """Logical OR on all given filters."""
  OR: [ResultWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ResultWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  confirmed: Boolean

  """All values that are not equal to given value."""
  confirmed_not: Boolean
  challenge: ChallengeWhereInput
  createdBy: UserWhereInput
  winner: UserWhereInput
  loser: UserWhereInput
}

input ResultWhereUniqueInput {
  id: ID
}

type Subscription {
  challenge(where: ChallengeSubscriptionWhereInput): ChallengeSubscriptionPayload
  result(where: ResultSubscriptionWhereInput): ResultSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  challengesCreated(where: ChallengeWhereInput, orderBy: ChallengeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Challenge!]
  challengesParticipating(where: ChallengeWhereInput, orderBy: ChallengeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Challenge!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  challengesCreated: ChallengeCreateManyWithoutUserInput
  challengesParticipating: ChallengeCreateManyWithoutParticipantInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutChallengesCreatedInput {
  create: UserCreateWithoutChallengesCreatedInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutChallengesParticipatingInput {
  create: UserCreateWithoutChallengesParticipatingInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutChallengesCreatedInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  challengesParticipating: ChallengeCreateManyWithoutParticipantInput
}

input UserCreateWithoutChallengesParticipatingInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  challengesCreated: ChallengeCreateManyWithoutUserInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  challengesCreated: ChallengeUpdateManyWithoutUserInput
  challengesParticipating: ChallengeUpdateManyWithoutParticipantInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  challengesCreated: ChallengeUpdateManyWithoutUserInput
  challengesParticipating: ChallengeUpdateManyWithoutParticipantInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneRequiredWithoutChallengesCreatedInput {
  create: UserCreateWithoutChallengesCreatedInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutChallengesCreatedDataInput
  upsert: UserUpsertWithoutChallengesCreatedInput
}

input UserUpdateOneRequiredWithoutChallengesParticipatingInput {
  create: UserCreateWithoutChallengesParticipatingInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutChallengesParticipatingDataInput
  upsert: UserUpsertWithoutChallengesParticipatingInput
}

input UserUpdateWithoutChallengesCreatedDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  challengesParticipating: ChallengeUpdateManyWithoutParticipantInput
}

input UserUpdateWithoutChallengesParticipatingDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  challengesCreated: ChallengeUpdateManyWithoutUserInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutChallengesCreatedInput {
  update: UserUpdateWithoutChallengesCreatedDataInput!
  create: UserCreateWithoutChallengesCreatedInput!
}

input UserUpsertWithoutChallengesParticipatingInput {
  update: UserUpdateWithoutChallengesParticipatingDataInput!
  create: UserCreateWithoutChallengesParticipatingInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  resetToken: String

  """All values that are not equal to given value."""
  resetToken_not: String

  """All values that are contained in given list."""
  resetToken_in: [String!]

  """All values that are not contained in given list."""
  resetToken_not_in: [String!]

  """All values less than the given value."""
  resetToken_lt: String

  """All values less than or equal the given value."""
  resetToken_lte: String

  """All values greater than the given value."""
  resetToken_gt: String

  """All values greater than or equal the given value."""
  resetToken_gte: String

  """All values containing the given string."""
  resetToken_contains: String

  """All values not containing the given string."""
  resetToken_not_contains: String

  """All values starting with the given string."""
  resetToken_starts_with: String

  """All values not starting with the given string."""
  resetToken_not_starts_with: String

  """All values ending with the given string."""
  resetToken_ends_with: String

  """All values not ending with the given string."""
  resetToken_not_ends_with: String
  resetTokenExpiry: Float

  """All values that are not equal to given value."""
  resetTokenExpiry_not: Float

  """All values that are contained in given list."""
  resetTokenExpiry_in: [Float!]

  """All values that are not contained in given list."""
  resetTokenExpiry_not_in: [Float!]

  """All values less than the given value."""
  resetTokenExpiry_lt: Float

  """All values less than or equal the given value."""
  resetTokenExpiry_lte: Float

  """All values greater than the given value."""
  resetTokenExpiry_gt: Float

  """All values greater than or equal the given value."""
  resetTokenExpiry_gte: Float
  challengesCreated_every: ChallengeWhereInput
  challengesCreated_some: ChallengeWhereInput
  challengesCreated_none: ChallengeWhereInput
  challengesParticipating_every: ChallengeWhereInput
  challengesParticipating_some: ChallengeWhereInput
  challengesParticipating_none: ChallengeWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
